//Ensure that no two messages in the same transmission category and state share an identifying tag

[0: Connection]
Receive
	{name:<<string (player name)>>}

Send
	{playerId:<<int playerId>>}

[1: Lobby]
Send
	Update a player in the lobby (describe player "leaving" revokes challenges to and from that player)
	{player:{id:<<int (player id)>>, name:<<string (name of player)>>, state:<<string ("joining", "leaving")>>}}

	Forward game request to from one player to another 
	{challenge:<<int (id of player that issued the challenge)>>}

Recieve
	Start game with this player.
	{challenge:<<int (id of player that the challenge is to)>>}

	Accept challenge
	{accept:<<int (player id)>>}


[2: Creation]
Send
	Information on a planet/body
	{createPlanet:{capacity:<<int>>, growth:<<int (new troops per 100ms)>>, player:<<int (player id)>>, troops:<<int (number of troops on  planet)>>, position:{x:<<int>>, y:<<int>>, z:<<int>>}}}

	Number of planets
	{radius:<<int>>}

	Ready (this is a notification thats sent to all clients at the same time)
	{start:true}

Recieve
	Confirm Game has loaded
	{ready:true}


[3: Game]
Send
	Update the states of a planet (periodic)
	{updateplanet:{id:<<int (id of planet)>>, player:<<int>>, troops:<<int (number of troops on planet)>>, time:<<int (unix time in millis)>>}}

	Show troop movements
	{deployment:{source:<<int (id of planet)>>, destination:<<int (id of planet)>>, player:<<int (team>>, troops:<<troop>>, arrival:<<int (unix time in millis)>>}}

	Winner
	{winner:<<int (player id)>>}

Recieve
	Commands to send troops from 1 planet to the other
	{deployment:{source:<<int (planet id)>>, destination<<int (planet id)>>}}

	Request to leave the game and enter lobby
	{lobby:true}
